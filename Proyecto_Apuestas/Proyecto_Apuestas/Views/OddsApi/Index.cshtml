@using Proyecto_Apuestas.ViewModels.API
@model OddsApiDashboardViewModel
@{
    ViewData["Title"] = "Centro de Cuotas Internacionales - Bet506";
    Layout = "_Layout";
}

<!-- Hero Section -->
<section class="hero-section">
    <div class="hero-overlay"></div>
    <div class="container-fluid">
        <div class="row align-items-center min-vh-50">
            <div class="col-lg-8 col-xl-6">
                <div class="hero-content">
                    <div class="hero-badge mb-3">
                        <span class="badge bg-gradient-primary px-3 py-2">
                            <i class="bi bi-lightning-charge-fill me-1"></i>EN TIEMPO REAL
                        </span>
                    </div>
                    <h1 class="hero-title">
                        Centro de <span class="text-gradient-primary">Cuotas</span><br>
                        Internacionales
                    </h1>
                    <p class="hero-subtitle">
                        Accede a las mejores cuotas deportivas de mercados internacionales. 
                        Datos en tiempo real de más de 50 casas de apuestas globales.
                    </p>
                    <div class="hero-actions">
                        <a href="#sports-section" class="btn btn-primary btn-lg px-4 smooth-scroll">
                            <i class="bi bi-rocket-takeoff me-2"></i>Explorar Deportes
                        </a>
                        <a href="#featured-section" class="btn btn-outline-light btn-lg px-4 ms-3 smooth-scroll">
                            <i class="bi bi-eye me-2"></i>Ver Destacados
                        </a>
                    </div>
                </div>
            </div>
            <div class="col-lg-4 col-xl-6 d-none d-lg-block">
                <div class="hero-stats">
                    <div class="stat-card glass-effect">
                        <div class="stat-icon bg-success">
                            <i class="bi bi-graph-up-arrow"></i>
                        </div>
                        <div class="stat-content">
                            <div class="stat-number">@Model.ActiveSports.Count</div>
                            <div class="stat-label">Deportes Activos</div>
                        </div>
                    </div>
                    <div class="stat-card glass-effect">
                        <div class="stat-icon bg-info">
                            <i class="bi bi-globe-americas"></i>
                        </div>
                        <div class="stat-content">
                            <div class="stat-number">4</div>
                            <div class="stat-label">Regiones</div>
                        </div>
                    </div>
                    <div class="stat-card glass-effect">
                        <div class="stat-icon @(Model.IsApiAvailable ? "bg-success" : "bg-danger")">
                            <i class="bi bi-@(Model.IsApiAvailable ? "wifi" : "wifi-off")"></i>
                        </div>
                        <div class="stat-content">
                            <div class="stat-number">@(Model.IsApiAvailable ? "LIVE" : "OFF")</div>
                            <div class="stat-label">Estado API</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- API Status Section -->
<section class="api-status-section">
    <div class="container-fluid">
        <div class="api-status-card glass-effect">
            <div class="row align-items-center g-4">
                <div class="col-md-3">
                    <div class="status-indicator">
                        @if (Model.IsApiAvailable)
                        {
                            <div class="status-dot status-success pulse"></div>
                            <span class="status-text text-success fw-bold">Servicio Operativo</span>
                        }
                        else
                        {
                            <div class="status-dot status-danger"></div>
                            <span class="status-text text-danger fw-bold">Servicio Interrumpido</span>
                        }
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="usage-info">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <span class="text-white fw-medium">Uso de API</span>
                            <span class="text-muted">
                                @Model.ApiUsage.RequestsUsed / @(Model.ApiUsage.RequestsUsed + Model.ApiUsage.RequestsRemaining) solicitudes
                            </span>
                        </div>
                        @{
                            var percentage = Model.ApiUsage.RequestsUsed > 0
                                ? (double)Model.ApiUsage.RequestsUsed / (Model.ApiUsage.RequestsUsed + Model.ApiUsage.RequestsRemaining) * 100
                                : 0;
                            var progressColor = percentage > 80 ? "danger" : percentage > 60 ? "warning" : "success";
                        }
                        <div class="progress-modern">
                            <div class="progress-bar bg-@progressColor" style="width: @percentage%">
                                <span class="progress-shine"></span>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3 text-md-end">
                    <button class="btn btn-outline-primary btn-sm" onclick="updateApiStatus()">
                        <i class="bi bi-arrow-clockwise me-1"></i>Actualizar Estado
                    </button>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Search Section -->
<section class="search-section" id="search-section">
    <div class="container-fluid">
        <div class="row justify-content-center">
            <div class="col-lg-8 col-xl-6">
                <div class="search-card glass-effect">
                    <div class="search-header">
                        <h3 class="search-title">
                            <i class="bi bi-search me-2 text-primary"></i>Búsqueda Inteligente
                        </h3>
                        <p class="search-subtitle">Encuentra eventos de cualquier equipo o competición</p>
                    </div>
                    <div class="search-form">
                        <div class="search-input-wrapper">
                            <div class="search-icon">
                                <i class="bi bi-search"></i>
                            </div>
                            <input type="text"
                                   id="searchEvents"
                                   class="search-input"
                                   placeholder="Buscar equipos, eventos o competiciones..."
                                   autocomplete="off">
                            <div class="search-loading d-none">
                                <div class="spinner-border spinner-border-sm" role="status"></div>
                            </div>
                            <button class="search-btn" type="button" onclick="searchEvents()">
                                <i class="bi bi-arrow-right"></i>
                            </button>
                        </div>
                        <div class="search-suggestions">
                            <span class="suggestion-tag" onclick="quickSearch('Real Madrid')">Real Madrid</span>
                            <span class="suggestion-tag" onclick="quickSearch('Manchester City')">Manchester City</span>
                            <span class="suggestion-tag" onclick="quickSearch('Lakers')">Lakers</span>
                            <span class="suggestion-tag" onclick="quickSearch('Patriots')">Patriots</span>
                        </div>
                    </div>
                    <div id="searchResults" class="search-results"></div>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Sports Section -->
<section class="sports-section" id="sports-section">
    <div class="container-fluid">
        <div class="section-header">
            <div class="row align-items-center">
                <div class="col-md-8">
                    <h2 class="section-title">
                        <span class="title-icon">
                            <i class="bi bi-trophy-fill"></i>
                        </span>
                        Deportes Disponibles
                    </h2>
                    <p class="section-subtitle">Explora las mejores cuotas en deportes de todo el mundo</p>
                </div>
                <div class="col-md-4 text-md-end">
                    <div class="sport-filters">
                        <button class="filter-btn active" data-filter="all">
                            <i class="bi bi-grid-3x3-gap me-1"></i>Todos
                        </button>
                        <button class="filter-btn" data-filter="popular">
                            <i class="bi bi-star me-1"></i>Populares
                        </button>
                        <button class="filter-btn" data-filter="live">
                            <i class="bi bi-broadcast me-1"></i>En Vivo
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <div class="sports-grid">
            @foreach (var sportGroup in Model.ActiveSports.GroupBy(s => s.Group))
            {
                <div class="sport-category" data-category="@sportGroup.Key.ToLower()">
                    <div class="category-header">
                        <h4 class="category-title">
                            <i class="bi bi-@(sportGroup.Key.ToLower().Contains("soccer") ? "trophy" : sportGroup.Key.ToLower().Contains("basketball") ? "circle" : sportGroup.Key.ToLower().Contains("american") ? "shield" : "trophy") me-2 text-primary"></i>
                            @sportGroup.Key
                        </h4>
                        <span class="category-count">@sportGroup.Count() deportes</span>
                    </div>
                    <div class="row g-4">
                        @foreach (var sport in sportGroup)
                        {
                            <div class="col-lg-4 col-xl-3">
                                <div class="sport-card @(sport.Key.Contains("soccer") || sport.Key.Contains("basketball") || sport.Key.Contains("americanfootball") ? "popular" : "")">
                                    <div class="sport-card-header">
                                        <div class="sport-icon">
                                            <i class="bi bi-@(sport.Key.Contains("soccer") ? "trophy" : sport.Key.Contains("basketball") ? "circle" : sport.Key.Contains("americanfootball") ? "shield" : sport.Key.Contains("baseball") ? "diamond" : sport.Key.Contains("tennis") ? "circle-fill" : "trophy")"></i>
                                        </div>
                                        <div class="sport-status">
                                            @if (sport.Key.Contains("soccer") || sport.Key.Contains("basketball") || sport.Key.Contains("americanfootball"))
                                            {
                                                <span class="status-badge popular">
                                                    <i class="bi bi-fire"></i>Popular
                                                </span>
                                            }
                                            @if (sport.Key.Contains("soccer_epl") || sport.Key.Contains("basketball_nba"))
                                            {
                                                <span class="status-badge live pulse">
                                                    <i class="bi bi-record-circle"></i>Live
                                                </span>
                                            }
                                        </div>
                                    </div>
                                    <div class="sport-card-body">
                                        <h5 class="sport-title">@sport.Title</h5>
                                        <p class="sport-description">
                                            @if (sport.Key.Contains("soccer"))
                                            {
                                                <text>El deporte más popular del mundo</text>
                                            }
                                            else if (sport.Key.Contains("basketball"))
                                            {
                                                <text>Acción rápida y emocionante</text>
                                            }
                                            else if (sport.Key.Contains("americanfootball"))
                                            {
                                                <text>Estrategia y fuerza combinadas</text>
                                            }
                                            else if (sport.Key.Contains("baseball"))
                                            {
                                                <text>El pasatiempo americano clásico</text>
                                            }
                                            else
                                            {
                                                <text>Emocionantes competiciones deportivas</text>
                                            }
                                        </p>
                                        <div class="sport-stats">
                                            <div class="stat-item">
                                                <span class="stat-number">12+</span>
                                                <span class="stat-label">Eventos</span>
                                            </div>
                                            <div class="stat-item">
                                                <span class="stat-number">25+</span>
                                                <span class="stat-label">Casas</span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="sport-card-footer">
                                        <a href="@Url.Action("Events", "OddsApi", new { sportKey = sport.Key })" 
                                           class="sport-btn">
                                            <span>Ver Eventos</span>
                                            <i class="bi bi-arrow-right"></i>
                                        </a>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</section>

<!-- Featured Events Section -->
<section class="featured-section" id="featured-section">
    <div class="container-fluid">
        <div class="section-header">
            <div class="row align-items-center">
                <div class="col-md-8">
                    <h2 class="section-title">
                        <span class="title-icon">
                            <i class="bi bi-star-fill"></i>
                        </span>
                        Eventos Destacados
                    </h2>
                    <p class="section-subtitle">Los eventos más populares y con mejores cuotas disponibles</p>
                </div>
                <div class="col-md-4 text-md-end">
                    <a href="@Url.Action("LiveEvents", "OddsApi")" class="btn btn-outline-primary btn-lg">
                        <i class="bi bi-broadcast me-2"></i>Ver Todos los Eventos en Vivo
                    </a>
                </div>
            </div>
        </div>

        <div id="featuredEvents" class="featured-events-container">
            <div class="loading-state">
                <div class="loading-card glass-effect">
                    <div class="loading-animation">
                        <div class="loading-spinner"></div>
                        <div class="loading-text">
                            <h4>Cargando eventos destacados...</h4>
                            <p>Obteniendo las mejores cuotas internacionales</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@if (User.IsInRole("Admin"))
{
    <!-- Admin Panel -->
    <section class="admin-section">
        <div class="container-fluid">
            <div class="admin-panel glass-effect">
                <div class="admin-header">
                    <div class="d-flex align-items-center">
                        <div class="admin-icon">
                            <i class="bi bi-gear-fill"></i>
                        </div>
                        <div class="admin-title">
                            <h4>Panel de Administración</h4>
                            <p>Gestión y sincronización de datos deportivos</p>
                        </div>
                    </div>
                    <div class="admin-badge">
                        <span class="badge bg-warning text-dark">
                            <i class="bi bi-shield-check me-1"></i>ADMIN
                        </span>
                    </div>
                </div>
                <div class="admin-body">
                    <div class="row g-4">
                        <div class="col-lg-6">
                            <div class="admin-action-card">
                                <div class="action-icon bg-success">
                                    <i class="bi bi-arrow-repeat"></i>
                                </div>
                                <div class="action-content">
                                    <h5>Sincronizar Deportes</h5>
                                    <p>Actualiza la lista completa de deportes disponibles</p>
                                    <button class="btn btn-success" onclick="syncSports()">
                                        <i class="bi bi-download me-1"></i>Sincronizar Ahora
                                    </button>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-6">
                            <div class="admin-action-card">
                                <div class="action-icon bg-primary">
                                    <i class="bi bi-calendar-event"></i>
                                </div>
                                <div class="action-content">
                                    <h5>Sincronizar Eventos</h5>
                                    <p>Actualiza eventos de un deporte específico</p>
                                    <div class="input-group">
                                        <select id="sportToSync" class="form-select">
                                            <option value="">Seleccionar deporte...</option>
                                            @foreach (var sport in Model.ActiveSports)
                                            {
                                                <option value="@sport.Key">@sport.Title</option>
                                            }
                                        </select>
                                        <button class="btn btn-primary" onclick="syncEvents()">
                                            <i class="bi bi-sync me-1"></i>Sincronizar
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
}
</div>

@section Scripts {
    <script>
        // Modern JavaScript with better UX
        class OddsApiDashboard {
            constructor() {
                this.searchTimeout = null;
                this.refreshInterval = null;
                this.isLoading = false;
                this.init();
            }

            init() {
                this.setupEventListeners();
                this.loadFeaturedEvents();
                this.setupAutoRefresh();
                this.setupSmoothScrolling();
                this.animateOnLoad();
            }

            setupEventListeners() {
                // Search with debouncing
                $('#searchEvents').on('input', (e) => {
                    clearTimeout(this.searchTimeout);
                    const query = e.target.value;
                    
                    if (query.length === 0) {
                        $('#searchResults').empty().removeClass('show');
                        $('.search-loading').addClass('d-none');
                        return;
                    }
                    
                    if (query.length >= 2) {
                        $('.search-loading').removeClass('d-none');
                        this.searchTimeout = setTimeout(() => this.searchEvents(query), 300);
                    }
                });

                // Search on enter
                $('#searchEvents').on('keypress', (e) => {
                    if (e.which === 13) {
                        e.preventDefault();
                        this.searchEvents(e.target.value);
                    }
                });

                // Sport filter buttons with proper event handling
                $('.filter-btn').on('click', (e) => {
                    e.preventDefault();
                    const btn = $(e.currentTarget);
                    const filter = btn.data('filter');
                    
                    // Update active button
                    $('.filter-btn').removeClass('active');
                    btn.addClass('active');
                    
                    // Apply filter
                    this.filterSports(filter);
                });
            }

            async searchEvents(query) {
                if (query.length < 2) return;

                try {
                    $('.search-loading').removeClass('d-none');
                    const response = await fetch(`@Url.Action("SearchEvents", "OddsApi")?query=${encodeURIComponent(query)}`);
                    const data = await response.text();
                    
                    $('#searchResults').html(data).addClass('show');
                    $('.search-loading').addClass('d-none');
                    
                    // Add animation to results
                    this.animateSearchResults();
                } catch (error) {
                    console.error('Search error:', error);
                    $('#searchResults').html(`
                        <div class="alert alert-warning">
                            <i class="bi bi-exclamation-triangle me-2"></i>
                            Error en la búsqueda. Intente nuevamente.
                        </div>
                    `);
                    $('.search-loading').addClass('d-none');
                }
            }

            quickSearch(term) {
                $('#searchEvents').val(term).trigger('input');
                // Scroll to search results
                setTimeout(() => {
                    if ($('#searchResults').children().length > 0) {
                        $('html, body').animate({
                            scrollTop: $('#searchResults').offset().top - 100
                        }, 500);
                    }
                }, 500);
            }

            clearSearch() {
                $('#searchEvents').val('');
                $('#searchResults').empty().removeClass('show');
                $('.search-loading').addClass('d-none');
            }

            async loadFeaturedEvents() {
                const container = $('#featuredEvents');
                
                try {
                    // Show enhanced loading state
                    const response = await fetch('@Url.Action("Events", "OddsApi", new { sportKey = "soccer_epl", region = "us", market = "h2h" })');
                    
                    if (response.ok) {
                        container.html(`
                            <div class="featured-success">
                                <div class="success-card glass-effect">
                                    <div class="success-icon">
                                        <i class="bi bi-check-circle-fill text-success"></i>
                                    </div>
                                    <div class="success-content">
                                        <h4>Eventos Cargados Exitosamente</h4>
                                        <p>Explore los eventos destacados de Premier League y otros deportes</p>
                                        <div class="action-buttons">
                                            <a href="@Url.Action("Events", "OddsApi", new { sportKey = "soccer_epl" })" 
                                               class="btn btn-primary">
                                                <i class="bi bi-trophy me-2"></i>Ver Premier League
                                            </a>
                                            <a href="@Url.Action("Events", "OddsApi", new { sportKey = "basketball_nba" })" 
                                               class="btn btn-outline-primary ms-2">
                                                <i class="bi bi-circle me-2"></i>Ver NBA
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        `);
                    } else {
                        throw new Error('Failed to load events');
                    }
                } catch (error) {
                    container.html(`
                        <div class="featured-error">
                            <div class="error-card glass-effect">
                                <div class="error-icon">
                                    <i class="bi bi-exclamation-triangle-fill text-warning"></i>
                                </div>
                                <div class="error-content">
                                    <h4>Error al Cargar Eventos</h4>
                                    <p>No se pudieron cargar los eventos destacados en este momento</p>
                                    <button class="btn btn-outline-warning" onclick="dashboard.loadFeaturedEvents()">
                                        <i class="bi bi-arrow-clockwise me-2"></i>Reintentar
                                    </button>
                                </div>
                            </div>
                        </div>
                    `);
                }
            }

            setupAutoRefresh() {
                this.refreshInterval = setInterval(() => {
                    this.updateApiStatus();
                    if (!this.isLoading) {
                        this.loadFeaturedEvents();
                    }
                }, 60000);
            }

            setupSmoothScrolling() {
                $('.smooth-scroll').on('click', function(e) {
                    e.preventDefault();
                    const target = $(this.getAttribute('href'));
                    if (target.length) {
                        $('html, body').animate({
                            scrollTop: target.offset().top - 80
                        }, 800, 'easeInOutCubic');
                    }
                });
            }


            filterSports(filter) {
                const categories = $('.sport-category');
                const cards = $('.sport-card');
                
                // Remove existing animations
                cards.removeClass('animate-in');
                
                // Show all initially
                categories.show();
                cards.show();
                
                // Apply filter with smooth transition
                setTimeout(() => {
                    switch(filter) {
                        case 'popular':
                            // Hide non-popular cards and empty categories
                            cards.each(function() {
                                const card = $(this);
                                if (!card.hasClass('popular')) {
                                    card.fadeOut(200);
                                }
                            });
                            // Hide categories with no visible cards
                            setTimeout(() => {
                                categories.each(function() {
                                    const category = $(this);
                                    const visibleCards = category.find('.sport-card.popular:visible');
                                    if (visibleCards.length === 0) {
                                        category.fadeOut(200);
                                    }
                                });
                            }, 250);
                            break;
                            
                        case 'live':
                            // Hide cards without live status
                            cards.each(function() {
                                const card = $(this);
                                if (!card.find('.status-badge.live').length) {
                                    card.fadeOut(200);
                                }
                            });
                            // Hide categories with no visible cards
                            setTimeout(() => {
                                categories.each(function() {
                                    const category = $(this);
                                    const visibleCards = category.find('.sport-card:visible');
                                    if (visibleCards.length === 0) {
                                        category.fadeOut(200);
                                    }
                                });
                            }, 250);
                            break;
                            
                        default: // 'all'
                            categories.fadeIn(200);
                            cards.fadeIn(200);
                    }
                    
                    // Animate visible cards after filter is applied
                    setTimeout(() => {
                        cards.filter(':visible').each((i, card) => {
                            setTimeout(() => {
                                $(card).addClass('animate-in');
                            }, i * 50);
                        });
                    }, 300);
                }, 100);
            }

            animateOnLoad() {
                // Animate hero elements with jQuery
                $('.hero-badge').css({ opacity: 0, transform: 'translateY(20px)' }).animate({ opacity: 1 }, 600).css('transform', 'translateY(0)');
                
                setTimeout(() => {
                    $('.hero-title').css({ opacity: 0, transform: 'translateY(30px)' }).animate({ opacity: 1 }, 800).css('transform', 'translateY(0)');
                }, 300);
                
                setTimeout(() => {
                    $('.hero-subtitle').css({ opacity: 0, transform: 'translateY(20px)' }).animate({ opacity: 1 }, 600).css('transform', 'translateY(0)');
                }, 500);
                
                setTimeout(() => {
                    $('.hero-actions .btn').each((i, btn) => {
                        setTimeout(() => {
                            $(btn).css({ opacity: 0, transform: 'translateY(20px)' }).animate({ opacity: 1 }, 500).css('transform', 'translateY(0)');
                        }, i * 100);
                    });
                }, 700);
                
                setTimeout(() => {
                    $('.stat-card').each((i, card) => {
                        setTimeout(() => {
                            $(card).css({ opacity: 0, transform: 'scale(0.9)' }).animate({ opacity: 1 }, 600).css('transform', 'scale(1)');
                        }, i * 100);
                    });
                }, 500);

                // Animate sections on scroll with Intersection Observer
                if ('IntersectionObserver' in window) {
                    const observer = new IntersectionObserver((entries) => {
                        entries.forEach(entry => {
                            if (entry.isIntersecting) {
                                entry.target.classList.add('animate-in');
                            }
                        });
                    }, { threshold: 0.1 });

                    document.querySelectorAll('.sport-card, .search-card, .api-status-card').forEach(el => {
                        observer.observe(el);
                    });
                } else {
                    // Fallback for browsers without IntersectionObserver
                    $('.sport-card, .search-card, .api-status-card').addClass('animate-in');
                }
            }

            animateSearchResults() {
                $('#searchResults .list-group-item').each((i, item) => {
                    setTimeout(() => {
                        $(item).addClass('animate-in');
                    }, i * 50);
                });
            }

            async updateApiStatus() {
                try {
                    const response = await fetch('@Url.Action("ApiStatus", "OddsApi")');
                    if (response.ok) {
                        const data = await response.json();
                        // Update API status UI with new data
                        console.log('API Status updated:', data);
                    }
                } catch (error) {
                    console.error('Failed to update API status:', error);
                }
            }

            // Admin functions
            @if (User.IsInRole("Admin"))
            {
                <text>
                async syncSports() {
                    if (!confirm('¿Desea sincronizar todos los deportes con la base de datos local?')) return;

                    const btn = event.target;
                    const originalText = btn.innerHTML;
                    btn.innerHTML = '<i class="bi bi-arrow-repeat spinning me-1"></i>Sincronizando...';
                    btn.disabled = true;

                    try {
                        const response = await fetch('@Url.Action("SyncSports", "OddsApi")', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' }
                        });
                        
                        const result = await response.json();
                        
                        if (result.success) {
                            toastr.success(result.message);
                            setTimeout(() => location.reload(), 2000);
                        } else {
                            toastr.error(result.message);
                        }
                    } catch (error) {
                        toastr.error('Error de conexión');
                    } finally {
                        btn.innerHTML = originalText;
                        btn.disabled = false;
                    }
                }

                async syncEvents() {
                    const sportKey = $('#sportToSync').val();
                    if (!sportKey) {
                        toastr.warning('Seleccione un deporte');
                        return;
                    }

                    if (!confirm('¿Desea sincronizar los eventos de este deporte?')) return;

                    const btn = event.target;
                    const originalText = btn.innerHTML;
                    btn.innerHTML = '<i class="bi bi-sync spinning me-1"></i>Sincronizando...';
                    btn.disabled = true;

                    try {
                        const response = await fetch('@Url.Action("SyncEvents", "OddsApi")', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ sportKey })
                        });
                        
                        const result = await response.json();
                        
                        if (result.success) {
                            toastr.success(result.message);
                        } else {
                            toastr.error(result.message);
                        }
                    } catch (error) {
                        toastr.error('Error de conexión');
                    } finally {
                        btn.innerHTML = originalText;
                        btn.disabled = false;
                    }
                }
                </text>
            }
        }

        // Global functions for inline handlers
        let dashboard;
        
        $(document).ready(function() {
            dashboard = new OddsApiDashboard();
        });

        // Global functions
        function quickSearch(term) { dashboard.quickSearch(term); }
        function searchEvents() { dashboard.searchEvents($('#searchEvents').val()); }
        function clearSearch() { dashboard.clearSearch(); }
        function updateApiStatus() { dashboard.updateApiStatus(); }
        
        // Function for handling bets from search results
        function addToBetSlipFromSearch(button) {
            const eventId = $(button).data('event-id');
            const sportKey = $(button).data('sport-key');
            const teamName = $(button).data('team-name');
            const odds = parseFloat($(button).data('odds'));

            @if (User.Identity?.IsAuthenticated == true)
            {
                <text>
                // Create a temporary modal for quick bet from search
                const modalHtml = `
                    <div class="modal fade" id="quickBetFromSearchModal" tabindex="-1" aria-hidden="true">
                        <div class="modal-dialog modal-dialog-centered">
                            <div class="modal-content bg-dark-2 text-white border border-primary">
                                <div class="modal-header border-primary bg-dark-3">
                                    <h5 class="modal-title">
                                        <i class="bi bi-lightning-charge-fill me-2 text-warning"></i>Apuesta Rápida
                                    </h5>
                                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                                </div>
                                <div class="modal-body">
                                    <div class="alert alert-info bg-dark-3 border-info mb-3">
                                        <i class="bi bi-info-circle me-2"></i>
                                        <strong>Confirma tu apuesta</strong> - Desde resultados de búsqueda
                                    </div>
                                    
                                    <div class="bg-dark-3 p-3 rounded mb-3">
                                        <p><strong>Equipo:</strong> ${teamName}</p>
                                        <p><strong>Cuota:</strong> ${odds}</p>
                                        <p><strong>Evento ID:</strong> ${eventId}</p>
                                    </div>
                                    
                                    <div class="row g-3">
                                        <div class="col-md-6">
                                            <label class="form-label text-white fw-bold">
                                                <i class="bi bi-cash-coin me-1"></i>Monto a Apostar
                                            </label>
                                            <div class="input-group">
                                                <span class="input-group-text bg-dark-3 text-white border-secondary">₡</span>
                                                <input type="number" class="form-control bg-dark-3 text-white border-secondary" 
                                                       id="quickBetAmountFromSearch" min="100" step="100" value="1000">
                                            </div>
                                            <small class="text-muted">
                                                <i class="bi bi-info-circle me-1"></i>Mínimo: ₡100 - Máximo: ₡50,000
                                            </small>
                                        </div>
                                        <div class="col-md-6">
                                            <label class="form-label text-white fw-bold">
                                                <i class="bi bi-trophy me-1"></i>Ganancia Potencial
                                            </label>
                                            <div class="bg-success bg-opacity-10 border border-success rounded p-3 text-center">
                                                <h4 class="text-success mb-0" id="potentialWinFromSearch">₡${(1000 * odds).toFixed(2)}</h4>
                                                <small class="text-success">Ganancia estimada</small>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="modal-footer border-primary bg-dark-3">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                                        <i class="bi bi-x-circle me-1"></i>Cancelar
                                    </button>
                                    <button type="button" class="btn btn-primary" onclick="confirmQuickBetFromSearch('${eventId}', '${sportKey}', '${teamName}', ${odds})">
                                        <i class="bi bi-check-circle me-1"></i>Confirmar Apuesta
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>`;
                
                // Remove existing modal if any
                $('#quickBetFromSearchModal').remove();
                
                // Add modal to body
                $('body').append(modalHtml);
                
                // Show modal
                $('#quickBetFromSearchModal').modal('show');
                
                // Update potential win when amount changes
                $('#quickBetAmountFromSearch').on('input', function() {
                    const amount = parseFloat($(this).val()) || 0;
                    const potential = amount * odds;
                    $('#potentialWinFromSearch').text('₡' + potential.toFixed(2));
                });
                </text>
            }
            else
            {
                <text>
                if (typeof toastr !== 'undefined') {
                    toastr.warning('Debe iniciar sesión para apostar');
                } else {
                    alert('Debe iniciar sesión para apostar');
                }
                setTimeout(function() {
                    window.location.href = '@Url.Action("Login", "Account")';
                }, 2000);
                </text>
            }
        }
        
        function confirmQuickBetFromSearch(eventId, sportKey, teamName, odds) {
            const amount = parseFloat($('#quickBetAmountFromSearch').val());

            if (amount < 100) {
                if (typeof toastr !== 'undefined') {
                    toastr.error('El monto mínimo es ₡100');
                } else {
                    alert('El monto mínimo es ₡100');
                }
                return;
            }

            // Create form data
            const form = $('<form>', {
                'method': 'GET',
                'action': '@Url.Action("CreateBetFromApi", "OddsApi")'
            });

            // Add form fields
            form.append($('<input>', { 'type': 'hidden', 'name': 'ApiEventId', 'value': eventId }));
            form.append($('<input>', { 'type': 'hidden', 'name': 'SportKey', 'value': sportKey }));
            form.append($('<input>', { 'type': 'hidden', 'name': 'TeamName', 'value': teamName }));
            form.append($('<input>', { 'type': 'hidden', 'name': 'Odds', 'value': odds }));
            form.append($('<input>', { 'type': 'hidden', 'name': 'Stake', 'value': amount }));

            // Submit form
            form.appendTo('body').submit();
        }
        
        function loadMoreResults() {
            if (typeof toastr !== 'undefined') {
                toastr.info('Cargando más resultados...', 'Búsqueda');
            }
            // Here you could implement pagination or load more functionality
            // For now, it's just a placeholder
        }
        
        @if (User.IsInRole("Admin"))
        {
            <text>
            function syncSports() { dashboard.syncSports(); }
            function syncEvents() { dashboard.syncEvents(); }
            </text>
        }
    </script>
}

@section Styles {
    <style>
        /* Modern Design System */
        :root {
            --glass-bg: rgba(255, 255, 255, 0.05);
            --glass-border: rgba(255, 255, 255, 0.1);
            --glass-shadow: 0 8px 32px rgba(0, 0, 0, 0.37);
            --gradient-primary: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --gradient-success: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            --gradient-warning: linear-gradient(135deg, #fa709a 0%, #fee140 100%);
            --transition-smooth: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            --shadow-soft: 0 4px 6px rgba(0, 0, 0, 0.1);
            --shadow-medium: 0 8px 25px rgba(0, 0, 0, 0.15);
            --shadow-large: 0 20px 40px rgba(0, 0, 0, 0.2);
        }

        /* Glass Effect */
        .glass-effect {
            background: var(--glass-bg);
            backdrop-filter: blur(20px);
            -webkit-backdrop-filter: blur(20px);
            border: 1px solid var(--glass-border);
            box-shadow: var(--glass-shadow);
        }

        /* Hero Section */
        .hero-section {
            position: relative;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            overflow: hidden;
            min-height: 80vh;
            display: flex;
            align-items: center;
        }

        .hero-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.3);
            z-index: 1;
        }

        .hero-section::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="50" cy="50" r="1" fill="white" opacity="0.05"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
            z-index: 1;
        }

        .hero-content {
            position: relative;
            z-index: 2;
            padding: 2rem 0;
        }

        .hero-badge .badge {
            font-size: 0.9rem;
            padding: 0.5rem 1rem;
            border-radius: 50px;
            background: var(--gradient-success) !important;
            border: none;
            animation: pulse 2s infinite;
        }

        .hero-title {
            font-size: 3.5rem;
            font-weight: 800;
            line-height: 1.1;
            margin-bottom: 1.5rem;
            color: white;
        }

        .text-gradient-primary {
            background: var(--gradient-primary);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .hero-subtitle {
            font-size: 1.25rem;
            line-height: 1.6;
            color: rgba(255, 255, 255, 0.9);
            margin-bottom: 2rem;
            max-width: 600px;
        }

        .hero-actions .btn {
            border-radius: 50px;
            padding: 0.75rem 2rem;
            font-weight: 600;
            transition: var(--transition-smooth);
            box-shadow: var(--shadow-medium);
        }

        .hero-actions .btn:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-large);
        }

        /* Hero Stats */
        .hero-stats {
            position: relative;
            z-index: 2;
        }

        .stat-card {
            padding: 2rem;
            border-radius: 20px;
            margin-bottom: 1.5rem;
            transition: var(--transition-smooth);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .stat-card:hover {
            transform: translateY(-5px) scale(1.02);
        }

        .stat-icon {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 1rem;
            font-size: 1.5rem;
            color: white;
        }

        .stat-number {
            font-size: 2rem;
            font-weight: 800;
            color: white;
            display: block;
        }

        .stat-label {
            color: rgba(255, 255, 255, 0.7);
            font-size: 0.9rem;
            font-weight: 500;
        }

        /* API Status Section */
        .api-status-section {
            padding: 2rem 0;
            background: rgba(0, 0, 0, 0.02);
        }

        .api-status-card {
            padding: 2rem;
            border-radius: 20px;
            margin-bottom: 2rem;
        }

        .status-indicator {
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .status-dot {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            position: relative;
        }

        .status-success {
            background: #10b981;
        }

        .status-danger {
            background: #ef4444;
        }

        .pulse {
            animation: pulse 2s infinite;
        }

        @@keyframes pulse {
            0%, 100% { opacity: 1; transform: scale(1); }
            50% { opacity: 0.8; transform: scale(1.05); }
        }

        .progress-modern {
            height: 8px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 50px;
            overflow: hidden;
            position: relative;
        }

        .progress-bar {
            height: 100%;
            border-radius: 50px;
            position: relative;
            overflow: hidden;
            transition: width 0.6s ease;
        }

        .progress-shine {
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
            animation: shine 2s infinite;
        }

        @@keyframes shine {
            0% { left: -100%; }
            100% { left: 100%; }
        }

        /* Search Section */
        .search-section {
            padding: 4rem 0;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            position: relative;
        }

        .search-card {
            padding: 3rem;
            border-radius: 25px;
            max-width: 700px;
            margin: 0 auto;
        }

        .search-title {
            font-size: 2rem;
            font-weight: 700;
            color: white;
            margin-bottom: 0.5rem;
        }

        .search-subtitle {
            color: rgba(255, 255, 255, 0.8);
            margin-bottom: 2rem;
        }

        .search-input-wrapper {
            position: relative;
            margin-bottom: 1.5rem;
        }

        .search-input {
            width: 100%;
            padding: 1rem 3.5rem 1rem 3.5rem;
            border: none;
            border-radius: 50px;
            background: rgba(255, 255, 255, 0.9);
            font-size: 1.1rem;
            color: #333;
            transition: var(--transition-smooth);
            box-shadow: var(--shadow-medium);
        }

        .search-input:focus {
            outline: none;
            transform: scale(1.02);
            box-shadow: var(--shadow-large);
            background: white;
        }

        .search-icon {
            position: absolute;
            left: 1.25rem;
            top: 50%;
            transform: translateY(-50%);
            color: #666;
            font-size: 1.25rem;
        }

        .search-loading {
            position: absolute;
            right: 4rem;
            top: 50%;
            transform: translateY(-50%);
        }

        .search-btn {
            position: absolute;
            right: 0.5rem;
            top: 50%;
            transform: translateY(-50%);
            width: 3rem;
            height: 3rem;
            border: none;
            border-radius: 50%;
            background: var(--gradient-primary);
            color: white;
            font-size: 1.25rem;
            transition: var(--transition-smooth);
            box-shadow: var(--shadow-medium);
        }

        .search-btn:hover {
            transform: translateY(-50%) scale(1.1);
            box-shadow: var(--shadow-large);
        }

        .search-suggestions {
            display: flex;
            gap: 0.75rem;
            flex-wrap: wrap;
            justify-content: center;
        }

        .suggestion-tag {
            padding: 0.5rem 1rem;
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 25px;
            color: white;
            font-size: 0.9rem;
            cursor: pointer;
            transition: var(--transition-smooth);
        }

        .suggestion-tag:hover {
            background: rgba(255, 255, 255, 0.2);
            transform: translateY(-2px);
        }

        .search-results {
            margin-top: 2rem;
            max-height: 500px;
            overflow-y: auto;
            border-radius: 15px;
        }

        .search-results.show {
            animation: slideDown 0.3s ease;
        }

        /* Modern Scrollbars - Minimalistas sin fondo */
        .search-results::-webkit-scrollbar {
            width: 6px;
        }

        .search-results::-webkit-scrollbar-track {
            background: transparent;
        }

        .search-results::-webkit-scrollbar-thumb {
            background: rgba(102, 126, 234, 0.6);
            border-radius: 10px;
            transition: all 0.3s ease;
        }

        .search-results::-webkit-scrollbar-thumb:hover {
            background: rgba(102, 126, 234, 0.8);
        }

        .search-results::-webkit-scrollbar-corner {
            background: transparent;
        }

        /* Scrollbars para Firefox */
        .search-results {
            scrollbar-width: thin;
            scrollbar-color: rgba(102, 126, 234, 0.6) transparent;
        }

        /* Search Results Compact Styles */
        .search-results-container {
            max-height: 500px;
            overflow-y: auto;
        }

        .search-results-container::-webkit-scrollbar {
            width: 6px;
        }

        .search-results-container::-webkit-scrollbar-track {
            background: transparent;
        }

        .search-results-container::-webkit-scrollbar-thumb {
            background: rgba(102, 126, 234, 0.6);
            border-radius: 10px;
            transition: all 0.3s ease;
        }

        .search-results-container::-webkit-scrollbar-thumb:hover {
            background: rgba(102, 126, 234, 0.8);
        }

        .search-results-container {
            scrollbar-width: thin;
            scrollbar-color: rgba(102, 126, 234, 0.6) transparent;
        }

        .search-events-grid {
            display: grid;
            grid-template-columns: 1fr;
            gap: 0.75rem;
            padding: 0.5rem 0;
        }

        .search-event-card {
            border-radius: 12px;
            padding: 1rem;
            transition: all 0.3s ease;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .search-event-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
            border-color: rgba(102, 126, 234, 0.5);
        }

        .event-card-compact {
            display: flex;
            flex-direction: column;
            gap: 0.75rem;
        }

        /* Compact Header */
        .event-header-compact {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .event-sport-badge-mini {
            display: inline-flex;
            align-items: center;
            gap: 0.25rem;
            padding: 0.25rem 0.5rem;
            background: rgba(102, 126, 234, 0.2);
            border-radius: 8px;
            color: #667eea;
            font-size: 0.75rem;
            font-weight: 600;
        }

        .status-badge-mini {
            display: inline-flex;
            align-items: center;
            gap: 0.25rem;
            padding: 0.25rem 0.5rem;
            border-radius: 6px;
            font-size: 0.7rem;
            font-weight: 600;
        }

        .status-badge-mini.live {
            background: rgba(239, 68, 68, 0.2);
            color: #ef4444;
        }

        .status-badge-mini.upcoming {
            background: rgba(245, 158, 11, 0.2);
            color: #f59e0b;
        }

        .status-badge-mini.scheduled {
            background: rgba(107, 114, 128, 0.2);
            color: #9ca3af;
        }

        /* Compact Teams */
        .event-teams-compact {
            display: flex;
            align-items: center;
            justify-content: space-between;
            gap: 0.5rem;
        }

        .team-compact {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            flex: 1;
        }

        .team-avatar-mini {
            width: 24px;
            height: 24px;
            border-radius: 50%;
            background: rgba(102, 126, 234, 0.2);
            display: flex;
            align-items: center;
            justify-content: center;
            color: #667eea;
            font-size: 0.75rem;
        }

        .team-name-mini {
            color: white;
            font-weight: 600;
            font-size: 0.85rem;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .vs-divider-mini {
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 0 0.5rem;
        }

        .vs-mini {
            color: #10b981;
            font-weight: 800;
            font-size: 0.7rem;
        }

        /* Compact Meta */
        .event-meta-compact {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem 0;
            border-top: 1px solid rgba(255, 255, 255, 0.1);
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        /* Compact Odds */
        .event-odds-compact {
            padding: 0.5rem 0;
        }

        .odds-chips-mini {
            display: flex;
            gap: 0.5rem;
            flex-wrap: wrap;
            margin-bottom: 0.5rem;
        }

        .odds-chip-mini {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 0.25rem;
            flex: 1;
            min-width: 0;
        }

        .chip-label-mini {
            font-size: 0.7rem;
            color: rgba(255, 255, 255, 0.7);
            font-weight: 500;
            text-align: center;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            width: 100%;
        }

        .chip-btn-mini {
            background: rgba(102, 126, 234, 0.2);
            border: 1px solid rgba(102, 126, 234, 0.3);
            color: #667eea;
            border-radius: 8px;
            padding: 0.25rem 0.5rem;
            font-size: 0.8rem;
            font-weight: 700;
            cursor: pointer;
            transition: all 0.3s ease;
            width: 100%;
            text-align: center;
            min-height: 28px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .chip-btn-mini:hover {
            background: rgba(102, 126, 234, 0.3);
            border-color: rgba(102, 126, 234, 0.5);
            color: white;
            transform: scale(1.05);
        }

        .bookmaker-info-mini {
            text-align: center;
        }

        /* Compact Footer */
        .event-footer-compact {
            display: flex;
            justify-content: center;
            gap: 0.5rem;
            padding-top: 0.5rem;
            border-top: 1px solid rgba(255, 255, 255, 0.1);
        }

        .action-btn-mini {
            padding: 0.375rem 0.75rem;
            font-size: 0.8rem;
            border-radius: 8px;
            transition: all 0.3s ease;
        }

        .action-btn-mini:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
        }

        /* Search Header Styles */
        .search-results-header {
            padding-bottom: 0.5rem;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            margin-bottom: 1rem;
        }

        .search-clear-btn {
            padding: 0.375rem 0.75rem;
            font-size: 0.8rem;
            border-radius: 8px;
            transition: all 0.3s ease;
        }

        .search-clear-btn:hover {
            background: rgba(239, 68, 68, 0.2);
            border-color: #ef4444;
            color: #ef4444;
        }

        .load-more-btn {
            padding: 0.5rem 1.5rem;
            border-radius: 25px;
            transition: all 0.3s ease;
        }

        .load-more-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(102, 126, 234, 0.3);
        }

        .search-no-results {
            border-radius: 12px;
            animation: fadeInUp 0.5s ease;
        }

        .pulse-animation {
            animation: pulse 2s infinite;
        }

        .bg-gradient-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
        }

        /* Responsive for Search Results */
        @@media (max-width: 576px) {
            .search-results {
                max-height: 350px;
            }
            
            .search-results-container {
                max-height: 350px;
            }
            
            .event-teams-compact {
                flex-direction: column;
                gap: 0.25rem;
            }
            
            .team-name-mini {
                font-size: 0.8rem;
            }
            
            .odds-chips-mini {
                justify-content: center;
            }
            
            .chip-btn-mini {
                font-size: 0.75rem;
                padding: 0.2rem 0.4rem;
            }
        }

        @@keyframes slideDown {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* Sports Section */
        .sports-section {
            padding: 5rem 0;
            background: #0a0a0a;
        }

        .section-header {
            margin-bottom: 4rem;
        }

        .section-title {
            font-size: 2.5rem;
            font-weight: 800;
            color: white;
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .title-icon {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            background: var(--gradient-primary);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            color: white;
        }

        .section-subtitle {
            font-size: 1.2rem;
            color: rgba(255, 255, 255, 0.7);
        }

        .sport-filters {
            display: flex;
            gap: 0.75rem;
        }

        .filter-btn {
            padding: 0.75rem 1.5rem;
            border: 1px solid rgba(255, 255, 255, 0.2);
            background: transparent;
            color: rgba(255, 255, 255, 0.7);
            border-radius: 50px;
            font-size: 0.9rem;
            font-weight: 500;
            cursor: pointer;
            transition: var(--transition-smooth);
        }

        .filter-btn:hover,
        .filter-btn.active {
            background: var(--gradient-primary);
            border-color: transparent;
            color: white;
            transform: translateY(-2px);
        }

        /* Sport Categories */
        .sports-grid .sport-category {
            margin-bottom: 4rem;
        }

        .category-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .category-title {
            font-size: 1.5rem;
            font-weight: 700;
            color: white;
            margin: 0;
        }

        .category-count {
            color: rgba(255, 255, 255, 0.5);
            font-size: 0.9rem;
        }

        /* Sport Cards */
        .sport-card {
            background: rgba(255, 255, 255, 0.03);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 20px;
            padding: 0;
            overflow: hidden;
            transition: var(--transition-smooth);
            height: 100%;
            position: relative;
            opacity: 1;
            transform: scale(1);
        }

        /* Filter transition effects */
        .sport-card.filtering {
            transition: opacity 0.3s ease, transform 0.3s ease;
        }

        .sport-category.filtering {
            transition: opacity 0.3s ease, transform 0.3s ease;
        }

        .sport-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: var(--gradient-primary);
            opacity: 0;
            transition: var(--transition-smooth);
        }

        .sport-card:hover::before {
            opacity: 1;
        }

        .sport-card:hover {
            transform: translateY(-8px);
            box-shadow: var(--shadow-large);
            border-color: rgba(255, 255, 255, 0.2);
        }

        .sport-card.popular {
            border-color: #f59e0b;
            background: rgba(245, 158, 11, 0.05);
        }

        .sport-card-header {
            padding: 1.5rem 1.5rem 0;
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
        }

        .sport-icon {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background: var(--gradient-primary);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 1.25rem;
        }

        .sport-status {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .status-badge {
            padding: 0.25rem 0.75rem;
            border-radius: 25px;
            font-size: 0.75rem;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 0.25rem;
        }

        .status-badge.popular {
            background: rgba(245, 158, 11, 0.2);
            color: #f59e0b;
            border: 1px solid rgba(245, 158, 11, 0.3);
        }

        .status-badge.live {
            background: rgba(239, 68, 68, 0.2);
            color: #ef4444;
            border: 1px solid rgba(239, 68, 68, 0.3);
        }

        .sport-card-body {
            padding: 1.5rem;
        }

        .sport-title {
            font-size: 1.25rem;
            font-weight: 700;
            color: white;
            margin-bottom: 0.75rem;
        }

        .sport-description {
            color: rgba(255, 255, 255, 0.6);
            font-size: 0.9rem;
            line-height: 1.5;
            margin-bottom: 1.5rem;
        }

        .sport-stats {
            display: flex;
            gap: 2rem;
        }

        .stat-item {
            text-align: center;
        }

        .stat-item .stat-number {
            font-size: 1.5rem;
            font-weight: 800;
            color: #06b6d4;
            display: block;
        }

        .stat-item .stat-label {
            font-size: 0.8rem;
            color: rgba(255, 255, 255, 0.5);
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .sport-card-footer {
            padding: 0 1.5rem 1.5rem;
        }

        .sport-btn {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            width: 100%;
            padding: 0.75rem 1.5rem;
            background: transparent;
            border: 1px solid rgba(255, 255, 255, 0.2);
            color: white;
            text-decoration: none;
            border-radius: 50px;
            font-weight: 600;
            transition: var(--transition-smooth);
        }

        .sport-btn:hover {
            background: var(--gradient-primary);
            border-color: transparent;
            color: white;
            text-decoration: none;
            transform: translateY(-2px);
        }

        /* Featured Section */
        .featured-section {
            padding: 5rem 0;
            background: linear-gradient(135deg, #1e3a8a 0%, #3730a3 100%);
        }

        .loading-card {
            padding: 3rem;
            border-radius: 20px;
            text-align: center;
        }

        .loading-animation {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 2rem;
        }

        .loading-spinner {
            width: 60px;
            height: 60px;
            border: 4px solid rgba(255, 255, 255, 0.1);
            border-left-color: #06b6d4;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @@keyframes spin {
            to { transform: rotate(360deg); }
        }

        .loading-text h4 {
            color: white;
            margin-bottom: 0.5rem;
        }

        .loading-text p {
            color: rgba(255, 255, 255, 0.7);
        }

        .success-card,
        .error-card {
            padding: 3rem;
            border-radius: 20px;
            text-align: center;
        }

        .success-icon,
        .error-icon {
            font-size: 4rem;
            margin-bottom: 1.5rem;
        }

        .success-content h4,
        .error-content h4 {
            color: white;
            margin-bottom: 1rem;
        }

        .success-content p,
        .error-content p {
            color: rgba(255, 255, 255, 0.8);
            margin-bottom: 2rem;
        }

        .action-buttons {
            display: flex;
            gap: 1rem;
            justify-content: center;
            flex-wrap: wrap;
        }

        /* Admin Section */
        .admin-section {
            padding: 3rem 0;
            background: rgba(245, 158, 11, 0.05);
        }

        .admin-panel {
            padding: 2rem;
            border-radius: 20px;
            border: 1px solid rgba(245, 158, 11, 0.2);
        }

        .admin-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid rgba(245, 158, 11, 0.2);
        }

        .admin-icon {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background: #f59e0b;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 1.25rem;
            margin-right: 1rem;
        }

        .admin-title h4 {
            color: white;
            margin: 0;
        }

        .admin-title p {
            color: rgba(255, 255, 255, 0.7);
            margin: 0;
            font-size: 0.9rem;
        }

        .admin-action-card {
            background: rgba(255, 255, 255, 0.03);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            padding: 2rem;
            height: 100%;
            display: flex;
            align-items: center;
            gap: 1.5rem;
        }

        .action-icon {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 1.5rem;
        }

        .action-content h5 {
            color: white;
            margin-bottom: 0.5rem;
        }

        .action-content p {
            color: rgba(255, 255, 255, 0.7);
            margin-bottom: 1rem;
            font-size: 0.9rem;
        }

        /* Animations */
        .animate-in {
            animation: fadeInUp 0.6s ease forwards;
        }

        @@keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .spinning {
            animation: spin 1s linear infinite;
        }

        /* Responsive Design */
        @@media (max-width: 768px) {
            .hero-title {
                font-size: 2.5rem;
            }
            
            .hero-subtitle {
                font-size: 1.1rem;
            }
            
            .section-title {
                font-size: 2rem;
            }
            
            .sport-filters {
                flex-wrap: wrap;
            }
            
            .admin-action-card {
                flex-direction: column;
                text-align: center;
            }
            
            .search-suggestions {
                justify-content: flex-start;
            }
            
            .hero-actions .btn {
                display: block;
                width: 100%;
                margin-bottom: 1rem;
            }
        }

        @@media (max-width: 576px) {
            .hero-title {
                font-size: 2rem;
            }
            
            .stat-card {
                padding: 1.5rem;
            }
            
            .search-card {
                padding: 2rem;
            }
            
            .admin-panel {
                padding: 1.5rem;
            }
        }

        /* Accessibility */
        @@media (prefers-reduced-motion: reduce) {
            *,
            *::before,
            *::after {
                animation-duration: 0.01ms !important;
                animation-iteration-count: 1 !important;
                transition-duration: 0.01ms !important;
            }
        }

        /* High contrast mode support */
        @@media (prefers-contrast: high) {
            .glass-effect {
                background: rgba(0, 0, 0, 0.8);
                border: 2px solid white;
            }
            
            .sport-card {
                border: 2px solid white;
            }
        }
    </style>
}
@model Proyecto_Apuestas.ViewModels.API.CreateBetFromApiViewModel
@{
    ViewData["Title"] = "Confirmar Apuesta";
}

<!-- Hero Section -->
<section class="bet-hero-section">
    <div class="hero-overlay"></div>
    <div class="container-fluid">
        <div class="row align-items-center min-vh-30">
            <div class="col-12">
                <div class="hero-content text-center">
                    <div class="hero-badge mb-3">
                        <span class="badge bg-gradient-primary px-3 py-2">
                            <i class="bi bi-lightning-charge-fill me-1"></i>APUESTA RÁPIDA
                        </span>
                    </div>
                    <h1 class="hero-title">
                        <i class="bi bi-target me-3 text-gradient-primary"></i>
                        Confirmar Apuesta
                    </h1>
                    <p class="hero-subtitle">
                        Revisa los detalles de tu apuesta antes de confirmar
                    </p>
                </div>
            </div>
        </div>
    </div>
</section>

<div class="container-fluid py-4">
    <div class="row justify-content-center">
        <div class="col-lg-8 col-xl-6">
            <!-- Event Card -->
            <div class="event-summary-card glass-effect mb-4">
                <div class="event-header">
                    <div class="sport-badge">
                        <i class="bi bi-@(Model.SportKey.Contains("soccer") ? "trophy" : Model.SportKey.Contains("basketball") ? "circle" : Model.SportKey.Contains("americanfootball") ? "shield" : "trophy")"></i>
                        <span>@(Model.SportKey.Contains("soccer") ? "Fútbol" : Model.SportKey.Contains("basketball") ? "Baloncesto" : Model.SportKey.Contains("americanfootball") ? "Fútbol Americano" : "Deportes")</span>
                    </div>
                    <div class="event-status">
                        @if (Model.EventDate <= DateTime.Now.AddHours(2))
                        {
                            <span class="status-badge upcoming">
                                <i class="bi bi-clock-fill"></i>Próximo
                            </span>
                        }
                        else
                        {
                            <span class="status-badge scheduled">
                                <i class="bi bi-calendar-check"></i>Programado
                            </span>
                        }
                    </div>
                </div>
                
                <div class="event-details">
                    <h3 class="event-title">@Model.EventName</h3>
                    <div class="event-meta">
                        <span><i class="bi bi-calendar3 me-1 text-primary"></i>@Model.EventDate.ToString("dddd, dd MMMM yyyy")</span>
                        <span><i class="bi bi-clock me-1 text-success"></i>@Model.EventDate.ToString("HH:mm")</span>
                    </div>
                </div>
                
                <div class="bet-selection">
                    <div class="selection-header">
                        <h5><i class="bi bi-check-circle-fill text-success me-2"></i>Tu Selección</h5>
                    </div>
                    <div class="selection-details">
                        <div class="team-selection">
                            <span class="team-name">@Model.TeamName</span>
                            <span class="odds-badge">@Model.Odds.ToString("0.00")</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Bet Form -->
            <div class="bet-form-card glass-effect">
                @using (Html.BeginForm("CreateBetFromApi", "OddsApi", FormMethod.Post, new { @class = "bet-form" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(m => m.ApiEventId)
                    @Html.HiddenFor(m => m.SportKey)
                    @Html.HiddenFor(m => m.EventName)
                    @Html.HiddenFor(m => m.EventDate)
                    @Html.HiddenFor(m => m.TeamName)
                    @Html.HiddenFor(m => m.Odds)

                    <div class="form-header">
                        <h4><i class="bi bi-cash-coin me-2 text-primary"></i>Detalles de la Apuesta</h4>
                    </div>

                    <!-- Error Messages Display -->
                    @if (!ViewData.ModelState.IsValid)
                    {
                        <div class="alert alert-danger bg-dark-2 border-danger mb-4" role="alert">
                            <div class="d-flex align-items-start">
                                <i class="bi bi-exclamation-triangle-fill text-danger me-3 fs-4"></i>
                                <div>
                                    <h6 class="alert-heading text-danger">Error en la validación</h6>
                                    <ul class="mb-0 text-white">
                                        @foreach (var modelState in ViewData.ModelState.Values)
                                        {
                                            foreach (var error in modelState.Errors)
                                            {
                                                <li>@error.ErrorMessage</li>
                                            }
                                        }
                                    </ul>
                                </div>
                            </div>
                        </div>
                    }

                    <!-- User Balance -->
                    <div class="balance-display">
                        <div class="balance-card">
                            <div class="balance-icon">
                                <i class="bi bi-wallet2"></i>
                            </div>
                            <div class="balance-info">
                                <span class="balance-label">Saldo Disponible</span>
                                <span class="balance-amount">₡@Model.UserBalance.ToString("N2")</span>
                            </div>
                        </div>
                    </div>

                    <!-- Stake Input -->
                    <div class="form-group mb-4">
                        <label for="Stake" class="form-label">
                            <i class="bi bi-currency-dollar me-2"></i>Monto a Apostar
                        </label>
                        <div class="input-group input-group-lg">
                            <span class="input-group-text bg-dark-3 text-white border-secondary">₡</span>
                            @Html.TextBoxFor(m => m.Stake, new { 
                                @class = "form-control form-control-lg bg-dark-3 text-white border-secondary", 
                                @type = "number", 
                                @min = "100", 
                                @max = Model.UserBalance,
                                @step = "100", 
                                @placeholder = "1000",
                                @id = "stakeInput"
                            })
                        </div>
                        @Html.ValidationMessageFor(m => m.Stake, "", new { @class = "text-danger small mt-1" })
                        <div class="form-text">
                            <i class="bi bi-info-circle me-1"></i>
                            Mínimo: ₡100 | Máximo: ₡@Model.UserBalance.ToString("N0")
                        </div>
                    </div>

                    <!-- Quick Amount Buttons -->
                    <div class="quick-amounts mb-4">
                        <h6 class="text-white mb-3">Montos Rápidos</h6>
                        <div class="quick-amount-buttons">
                            <button type="button" class="btn btn-outline-primary quick-amount-btn" data-amount="1000">₡1,000</button>
                            <button type="button" class="btn btn-outline-primary quick-amount-btn" data-amount="2500">₡2,500</button>
                            <button type="button" class="btn btn-outline-primary quick-amount-btn" data-amount="5000">₡5,000</button>
                            <button type="button" class="btn btn-outline-primary quick-amount-btn" data-amount="10000">₡10,000</button>
                        </div>
                    </div>

                    <!-- Payout Calculation -->
                    <div class="payout-display">
                        <div class="payout-card bg-success bg-opacity-10 border border-success">
                            <div class="payout-header">
                                <h5 class="text-success mb-0">
                                    <i class="bi bi-trophy me-2"></i>Ganancia Potencial
                                </h5>
                            </div>
                            <div class="payout-details">
                                <div class="calculation-breakdown">
                                    <div class="calc-row">
                                        <span>Apuesta:</span>
                                        <span id="displayStake">₡0.00</span>
                                    </div>
                                    <div class="calc-row">
                                        <span>Cuota:</span>
                                        <span>@Model.Odds.ToString("0.00")</span>
                                    </div>
                                    <div class="calc-row total">
                                        <span><strong>Ganancia Total:</strong></span>
                                        <span id="displayPayout" class="text-success"><strong>₡0.00</strong></span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Action Buttons -->
                    <div class="form-actions">
                        <div class="row g-3">
                            <div class="col-6">
                                <a href="@Url.Action("Events", "OddsApi", new { sportKey = Model.SportKey })" 
                                   class="btn btn-secondary btn-lg w-100">
                                    <i class="bi bi-arrow-left me-2"></i>Volver
                                </a>
                            </div>
                            <div class="col-6">
                                <button type="submit" class="btn btn-primary btn-lg w-100" id="confirmBetBtn">
                                    <i class="bi bi-check-circle me-2"></i>Confirmar Apuesta
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <!-- Risk Warning -->
            <div class="risk-warning-card mt-4">
                <div class="alert alert-warning bg-dark-2 border-warning">
                    <div class="d-flex align-items-start">
                        <i class="bi bi-exclamation-triangle-fill text-warning me-3 fs-4"></i>
                        <div>
                            <h6 class="alert-heading text-warning">Advertencia de Responsabilidad</h6>
                            <p class="mb-0 text-white">
                                Las apuestas pueden crear adicción. Juega con responsabilidad y nunca apuestes más de lo que puedes permitirte perder.
                                Si necesitas ayuda, contacta a organizaciones de apoyo para el juego responsable.
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            const odds = @Html.Raw(Json.Serialize(Model.Odds));
            const maxBalance = @Html.Raw(Json.Serialize(Model.UserBalance));
            
            // Calculate and display payout
            function updatePayout() {
                const stake = parseFloat($('#stakeInput').val()) || 0;
                const payout = stake * odds;
                
                $('#displayStake').text('₡' + stake.toLocaleString('es-CR', { minimumFractionDigits: 2 }));
                $('#displayPayout').text('₡' + payout.toLocaleString('es-CR', { minimumFractionDigits: 2 }));
                
                // Enable/disable confirm button
                const isValidAmount = stake >= 100 && stake <= maxBalance;
                $('#confirmBetBtn').prop('disabled', !isValidAmount);
                
                if (!isValidAmount && stake > 0) {
                    if (stake < 100) {
                        toastr.warning('El monto mínimo es ₡100');
                    } else if (stake > maxBalance) {
                        toastr.error('Saldo insuficiente');
                    }
                }
            }
            
            // Update payout when stake changes
            $('#stakeInput').on('input', updatePayout);
            
            // Quick amount buttons
            $('.quick-amount-btn').on('click', function() {
                const amount = $(this).data('amount');
                if (amount <= maxBalance) {
                    $('#stakeInput').val(amount);
                    updatePayout();
                    
                    // Visual feedback
                    $('.quick-amount-btn').removeClass('active');
                    $(this).addClass('active');
                } else {
                    toastr.error('Monto excede tu saldo disponible');
                }
            });
            
            // Initialize payout calculation
            updatePayout();
            
            // Form validation before submit
            $('.bet-form').on('submit', function(e) {
                const form = this; // Store reference to the form
                const stake = parseFloat($('#stakeInput').val()) || 0;
                
                if (stake < 100) {
                    e.preventDefault();
                    toastr.error('El monto mínimo para apostar es ₡100');
                    $('#stakeInput').focus().addClass('is-invalid');
                    return false;
                }
                
                if (stake > maxBalance) {
                    e.preventDefault();
                    toastr.error('No tienes saldo suficiente para esta apuesta');
                    $('#stakeInput').focus().addClass('is-invalid');
                    return false;
                }
                
                // Show confirmation dialog
                e.preventDefault();
                
                const payout = stake * odds;
                const confirmation = confirm(
                    `¿Confirmar apuesta?\n\n` +
                    `Monto: ₡${stake.toLocaleString('es-CR', { minimumFractionDigits: 2 })}\n` +
                    `Cuota: ${odds}\n` +
                    `Ganancia potencial: ₡${payout.toLocaleString('es-CR', { minimumFractionDigits: 2 })}\n\n` +
                    `Esta acción no se puede deshacer.`
                );
                
                if (confirmation) {
                    // Show loading state
                    $('#confirmBetBtn').prop('disabled', true)
                        .html('<i class="bi bi-hourglass-split me-2 spinning"></i>Procesando apuesta...');
                    
                    // Add processing overlay
                    $('body').append(`
                        <div id="processingOverlay" style="
                            position: fixed; 
                            top: 0; 
                            left: 0; 
                            width: 100%; 
                            height: 100%; 
                            background: rgba(0,0,0,0.7); 
                            z-index: 9999; 
                            display: flex; 
                            align-items: center; 
                            justify-content: center;
                        ">
                            <div class="text-center text-white">
                                <div class="spinner-border mb-3" role="status"></div>
                                <h4>Procesando tu apuesta...</h4>
                                <p>Por favor, no cierres esta ventana</p>
                            </div>
                        </div>
                    `);
                    
                    // Submit the form after a brief delay
                    setTimeout(() => {
                        console.log('Submitting form...'); // Debug log
                        form.submit(); // Use the stored form reference
                    }, 500);
                } else {
                    // User cancelled, re-enable button
                    $('#confirmBetBtn').prop('disabled', false)
                        .html('<i class="bi bi-check-circle me-2"></i>Confirmar Apuesta');
                }
                
                return false;
            });
            
            // Remove invalid class when user starts typing
            $('#stakeInput').on('input', function() {
                $(this).removeClass('is-invalid');
            });
            
            // Add some animations
            $('.bet-form-card, .event-summary-card').addClass('animate-in');
        });
    </script>
}

@section Styles {
    <style>
        /* Bet Confirmation Styles */
        .bet-hero-section {
            position: relative;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            overflow: hidden;
            min-height: 40vh;
            display: flex;
            align-items: center;
        }

        .bet-hero-section .hero-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.4);
            z-index: 1;
        }

        .bet-hero-section .container-fluid {
            position: relative;
            z-index: 2;
        }

        .min-vh-30 {
            min-height: 30vh !important;
        }

        /* Cards */
        .event-summary-card,
        .bet-form-card {
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 20px;
            padding: 2rem;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.37);
            margin-bottom: 1.5rem;
        }

        .event-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }

        .sport-badge {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            background: rgba(102, 126, 234, 0.2);
            color: #667eea;
            padding: 0.5rem 1rem;
            border-radius: 25px;
            font-weight: 600;
            font-size: 0.9rem;
        }

        .event-title {
            color: white;
            font-size: 1.5rem;
            font-weight: 700;
            margin-bottom: 1rem;
        }

        .event-meta {
            display: flex;
            gap: 2rem;
            color: rgba(255, 255, 255, 0.8);
            margin-bottom: 1.5rem;
        }

        .bet-selection {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 15px;
            padding: 1.5rem;
        }

        .selection-header h5 {
            color: white;
            margin-bottom: 1rem;
        }

        .team-selection {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .team-name {
            color: white;
            font-weight: 600;
            font-size: 1.1rem;
        }

        .odds-badge {
            background: linear-gradient(135deg, #10b981, #059669);
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 25px;
            font-weight: 700;
            font-size: 1.1rem;
        }

        /* Form Styles */
        .form-header h4 {
            color: white;
            margin-bottom: 1.5rem;
        }

        .balance-display {
            margin-bottom: 2rem;
        }

        .balance-card {
            background: rgba(16, 185, 129, 0.1);
            border: 1px solid rgba(16, 185, 129, 0.3);
            border-radius: 15px;
            padding: 1.5rem;
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .balance-icon {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background: #10b981;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 1.25rem;
        }

        .balance-info {
            display: flex;
            flex-direction: column;
        }

        .balance-label {
            color: rgba(255, 255, 255, 0.8);
            font-size: 0.9rem;
        }

        .balance-amount {
            color: white;
            font-size: 1.25rem;
            font-weight: 700;
        }

        /* Quick Amount Buttons */
        .quick-amounts h6 {
            color: rgba(255, 255, 255, 0.9);
        }

        .quick-amount-buttons {
            display: flex;
            gap: 0.75rem;
            flex-wrap: wrap;
        }

        .quick-amount-btn {
            border-radius: 25px;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .quick-amount-btn.active,
        .quick-amount-btn:hover {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-color: transparent;
            color: white;
            transform: translateY(-2px);
        }

        /* Payout Display */
        .payout-display {
            margin: 2rem 0;
        }

        .payout-card {
            border-radius: 15px;
            padding: 1.5rem;
        }

        .payout-header h5 {
            margin-bottom: 1rem;
        }

        .calculation-breakdown {
            display: flex;
            flex-direction: column;
            gap: 0.75rem;
        }

        .calc-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            color: white;
        }

        .calc-row.total {
            border-top: 1px solid rgba(16, 185, 129, 0.3);
            padding-top: 0.75rem;
            font-size: 1.1rem;
        }

        /* Status Badges */
        .status-badge {
            padding: 0.5rem 1rem;
            border-radius: 25px;
            font-size: 0.85rem;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .status-badge.upcoming {
            background: rgba(245, 158, 11, 0.2);
            color: #f59e0b;
            border: 1px solid rgba(245, 158, 11, 0.3);
        }

        .status-badge.scheduled {
            background: rgba(59, 130, 246, 0.2);
            color: #3b82f6;
            border: 1px solid rgba(59, 130, 246, 0.3);
        }

        /* Form Controls */
        .form-control:focus {
            background: rgba(255, 255, 255, 0.1);
            border-color: #667eea;
            color: white;
            box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
        }

        .form-label {
            color: white;
            font-weight: 600;
            margin-bottom: 0.75rem;
        }

        .form-text {
            color: rgba(255, 255, 255, 0.7);
            margin-top: 0.5rem;
        }

        /* Risk Warning */
        .risk-warning-card {
            border-radius: 15px;
        }

        /* Form Validation Styles */
        .form-control.is-invalid {
            border-color: #ef4444;
            box-shadow: 0 0 0 0.2rem rgba(239, 68, 68, 0.25);
        }

        .spinning {
            animation: spin 1s linear infinite;
        }

        @@keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }

        /* Enhanced Alert Styles */
        .alert {
            border-radius: 15px;
            border-width: 2px;
        }

        .alert-danger {
            animation: alertShake 0.5s ease;
        }

        @@keyframes alertShake {
            0%, 20%, 40%, 60%, 80% {
                transform: translateX(0);
            }
            10%, 30%, 50%, 70%, 90% {
                transform: translateX(-5px);
            }
        }

        /* Animations */
        .animate-in {
            animation: slideInUp 0.6s ease forwards;
        }

        @@keyframes slideInUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Responsive */
        @@media (max-width: 768px) {
            .event-meta {
                flex-direction: column;
                gap: 0.5rem;
            }
            
            .quick-amount-buttons {
                justify-content: center;
            }
            
            .team-selection {
                flex-direction: column;
                gap: 1rem;
                text-align: center;
            }
        }
    </style>
}
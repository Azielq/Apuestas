@model Proyecto_Apuestas.Services.Interfaces.ApiBetDetailsViewModel
@{
    ViewData["Title"] = "Detalles de Apuesta";
}

<!-- Hero Section -->
<section class="bet-details-hero">
    <div class="hero-overlay"></div>
    <div class="container-fluid">
        <div class="row align-items-center min-vh-30">
            <div class="col-12">
                <div class="hero-content text-center">
                    <div class="hero-badge mb-3">
                        <span class="badge bg-gradient-@(Model.BetStatus == "W" ? "success" : Model.BetStatus == "L" ? "danger" : Model.BetStatus == "C" ? "warning" : "primary") px-3 py-2">
                            <i class="bi bi-@(Model.BetStatus == "W" ? "trophy-fill" : Model.BetStatus == "L" ? "x-circle-fill" : Model.BetStatus == "C" ? "x-octagon-fill" : "clock-fill") me-1"></i>
                            @Model.BetStatusDisplay.ToUpper()
                        </span>
                    </div>
                    <h1 class="hero-title">
                        <i class="bi bi-receipt me-3 text-gradient-primary"></i>
                        Detalles de Apuesta
                    </h1>
                    <p class="hero-subtitle">
                        Apuesta #@Model.ApiBetId - @Model.EventName
                    </p>
                </div>
            </div>
        </div>
    </div>
</section>

<div class="container-fluid py-4">
    <div class="row justify-content-center">
        <div class="col-lg-10 col-xl-8">
            <!-- Main Bet Details Card -->
            <div class="bet-details-card glass-effect mb-4">
                <div class="card-header">
                    <div class="row align-items-center">
                        <div class="col-md-8">
                            <h3 class="mb-0 text-white">
                                <i class="bi bi-calendar-event me-2 text-primary"></i>
                                @Model.EventName
                            </h3>
                        </div>
                        <div class="col-md-4 text-md-end">
                            <span class="status-badge status-@Model.BetStatus.ToLower()">
                                <i class="bi bi-@(Model.BetStatus == "W" ? "check-circle-fill" : Model.BetStatus == "L" ? "x-circle-fill" : Model.BetStatus == "C" ? "slash-circle-fill" : "clock-fill")"></i>
                                @Model.BetStatusDisplay
                            </span>
                        </div>
                    </div>
                </div>

                <div class="card-body">
                    <div class="row g-4">
                        <!-- Event Information -->
                        <div class="col-lg-6">
                            <div class="info-section">
                                <h5 class="section-title">
                                    <i class="bi bi-info-circle me-2"></i>Información del Evento
                                </h5>
                                <div class="info-grid">
                                    <div class="info-item">
                                        <span class="info-label">Fecha y Hora:</span>
                                        <span class="info-value">@Model.EventDate.ToString("dddd, dd MMMM yyyy - HH:mm")</span>
                                    </div>
                                    @if (!string.IsNullOrEmpty(Model.HomeTeam) && !string.IsNullOrEmpty(Model.AwayTeam))
                                    {
                                        <div class="info-item">
                                            <span class="info-label">Equipos:</span>
                                            <span class="info-value">@Model.HomeTeam vs @Model.AwayTeam</span>
                                        </div>
                                    }
                                    <div class="info-item">
                                        <span class="info-label">Deporte:</span>
                                        <span class="info-value">
                                            <i class="bi bi-@(Model.SportKey.Contains("soccer") ? "trophy" : Model.SportKey.Contains("basketball") ? "circle" : Model.SportKey.Contains("americanfootball") ? "shield" : "trophy") me-1"></i>
                                            @(Model.SportKey.Contains("soccer") ? "Fútbol" : Model.SportKey.Contains("basketball") ? "Baloncesto" : Model.SportKey.Contains("americanfootball") ? "Fútbol Americano" : "Deportes")
                                        </span>
                                    </div>
                                    @if (!string.IsNullOrEmpty(Model.Region))
                                    {
                                        <div class="info-item">
                                            <span class="info-label">Región:</span>
                                            <span class="info-value">@Model.Region.ToUpper()</span>
                                        </div>
                                    }
                                    @if (!string.IsNullOrEmpty(Model.Bookmaker))
                                    {
                                        <div class="info-item">
                                            <span class="info-label">Casa de Apuestas:</span>
                                            <span class="info-value">@Model.Bookmaker</span>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>

                        <!-- Bet Information -->
                        <div class="col-lg-6">
                            <div class="info-section">
                                <h5 class="section-title">
                                    <i class="bi bi-target me-2"></i>Detalles de la Apuesta
                                </h5>
                                <div class="info-grid">
                                    <div class="info-item">
                                        <span class="info-label">Selección:</span>
                                        <span class="info-value font-weight-bold">@Model.TeamName</span>
                                    </div>
                                    <div class="info-item">
                                        <span class="info-label">Cuota:</span>
                                        <span class="info-value text-primary font-weight-bold">@Model.Odds.ToString("0.00")</span>
                                    </div>
                                    <div class="info-item">
                                        <span class="info-label">Monto Apostado:</span>
                                        <span class="info-value">₡@Model.Stake.ToString("N2")</span>
                                    </div>
                                    <div class="info-item highlight">
                                        <span class="info-label">@(Model.BetStatus == "W" ? "Ganancia:" : "Pago Potencial:")</span>
                                        <span class="info-value text-@(Model.BetStatus == "W" ? "success" : "warning") font-weight-bold">
                                            ₡@Model.Payout.ToString("N2")
                                        </span>
                                    </div>
                                    <div class="info-item">
                                        <span class="info-label">Fecha de Apuesta:</span>
                                        <span class="info-value">@Model.CreatedAt.ToString("dd/MM/yyyy HH:mm")</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Event Result (if finished) -->
                    @if (Model.IsEventFinished && !string.IsNullOrEmpty(Model.EventResult))
                    {
                        <div class="row mt-4">
                            <div class="col-12">
                                <div class="result-section">
                                    <h5 class="section-title">
                                        <i class="bi bi-flag-fill me-2"></i>Resultado del Evento
                                    </h5>
                                    <div class="result-card bg-dark-3 p-3 rounded">
                                        <pre class="text-white mb-0">@Model.EventResult</pre>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <!-- Action Buttons -->
            <div class="action-buttons-card glass-effect">
                <div class="row g-3">
                    <div class="col-md-6">
                        <a href="@Url.Action("Index", "Betting")" class="btn btn-outline-primary btn-lg w-100">
                            <i class="bi bi-clock-history me-2"></i>Ver Historial
                        </a>
                    </div>
                    @if (Model.BetStatus == "P" && Model.EventDate > DateTime.Now.AddMinutes(5))
                    {
                        <div class="col-md-6">
                            @using (Html.BeginForm("CancelApiBet", "OddsApi", FormMethod.Post, new { @class = "w-100" }))
                            {
                                @Html.AntiForgeryToken()
                                @Html.Hidden("id", Model.ApiBetId)
                                <button type="submit" class="btn btn-warning btn-lg w-100" onclick="return confirm('¿Estás seguro de que deseas cancelar esta apuesta?')">
                                    <i class="bi bi-x-circle me-2"></i>Cancelar Apuesta
                                </button>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="col-md-6">
                            <a href="@Url.Action("Events", "OddsApi", new { sportKey = Model.SportKey })" class="btn btn-success btn-lg w-100">
                                <i class="bi bi-plus-circle me-2"></i>Nueva Apuesta
                            </a>
                        </div>
                    }
                </div>
            </div>

            <!-- Transaction Status (if available) -->
            @if (!string.IsNullOrEmpty(Model.TransactionStatus))
            {
                <div class="transaction-status-card mt-4">
                    <div class="alert alert-info bg-dark-2 border-info">
                        <div class="d-flex align-items-center">
                            <i class="bi bi-credit-card me-3 text-info fs-4"></i>
                            <div>
                                <h6 class="alert-heading text-info">Estado de Transacción</h6>
                                <p class="mb-0 text-white">Estado: <strong>@Model.TransactionStatus</strong></p>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@section Styles {
    <style>
        .bet-details-hero {
            position: relative;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            overflow: hidden;
            min-height: 30vh;
            display: flex;
            align-items: center;
        }

        .bet-details-hero .hero-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.4);
            z-index: 1;
        }

        .bet-details-card,
        .action-buttons-card {
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 20px;
            padding: 2rem;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.37);
        }

        .card-header {
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            padding-bottom: 1.5rem;
            margin-bottom: 2rem;
        }

        .status-badge {
            padding: 0.75rem 1.5rem;
            border-radius: 25px;
            font-weight: 600;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

        .status-badge.status-w {
            background: rgba(16, 185, 129, 0.2);
            color: #10b981;
            border: 1px solid rgba(16, 185, 129, 0.3);
        }

        .status-badge.status-l {
            background: rgba(239, 68, 68, 0.2);
            color: #ef4444;
            border: 1px solid rgba(239, 68, 68, 0.3);
        }

        .status-badge.status-c {
            background: rgba(245, 158, 11, 0.2);
            color: #f59e0b;
            border: 1px solid rgba(245, 158, 11, 0.3);
        }

        .status-badge.status-p {
            background: rgba(59, 130, 246, 0.2);
            color: #3b82f6;
            border: 1px solid rgba(59, 130, 246, 0.3);
        }

        .info-section {
            background: rgba(255, 255, 255, 0.03);
            border-radius: 15px;
            padding: 1.5rem;
            height: 100%;
        }

        .section-title {
            color: white;
            margin-bottom: 1.5rem;
            font-weight: 600;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            padding-bottom: 0.75rem;
        }

        .info-grid {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .info-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.75rem;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 10px;
            transition: all 0.3s ease;
        }

        .info-item:hover {
            background: rgba(255, 255, 255, 0.08);
        }

        .info-item.highlight {
            background: rgba(102, 126, 234, 0.1);
            border: 1px solid rgba(102, 126, 234, 0.3);
        }

        .info-label {
            color: rgba(255, 255, 255, 0.8);
            font-weight: 500;
        }

        .info-value {
            color: white;
            font-weight: 600;
            text-align: right;
        }

        .result-section {
            background: rgba(255, 255, 255, 0.03);
            border-radius: 15px;
            padding: 1.5rem;
        }

        .result-card {
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .font-weight-bold {
            font-weight: 700 !important;
        }

        .text-gradient-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        @@media (max-width: 768px) {
            .info-item {
                flex-direction: column;
                align-items: flex-start;
                gap: 0.5rem;
            }

            .info-value {
                text-align: left;
            }

            .card-header .row {
                text-align: center;
            }

            .status-badge {
                margin-top: 1rem;
            }
        }
    </style>
}